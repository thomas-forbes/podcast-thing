// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator js {
  provider = "prisma-client-js"
}

// Real stuff

model Show {
  id          String    @id @default(cuid())
  title       String    @unique @db.VarChar(255)
  slug        String    @unique @db.VarChar(255)
  description String?   @db.Text
  link        String?   @db.VarChar(255)
  feedUrl     String    @db.VarChar(255)
  imageUrl    String    @db.VarChar(255)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  episodes    Episode[]

  @@index([slug])
}

model Episode {
  id          String    @id @default(cuid())
  slug        String    @unique @db.VarChar(255)
  title       String    @db.VarChar(255)
  description String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  showId      String
  show        Show      @relation(fields: [showId], references: [id])
  comments    Comment[]

  @@index([slug])
  @@index([showId])
}

model Comment {
  id         String    @id @default(cuid())
  text       String    @db.Text
  likes      Int       @default(0)
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  episodeId  String
  episode    Episode   @relation(fields: [episodeId], references: [id])
  replyToId  String?
  replyTo    Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies    Comment[] @relation("ReplyTo")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  likedUsers Like[]

  @@index([episodeId])
  @@index([replyToId])
  @@index([userId])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  commentId String
  comment   Comment  @relation(fields: [commentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([commentId])
}

// ------------------------------------
//      Necessary for Next auth
// ------------------------------------

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
  likes         Like[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
